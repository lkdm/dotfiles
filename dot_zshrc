export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"

# By default, attach to the launchpad session
#if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
#  tmux new-session -A -s launchpad
#fi
alias tmux='tmux -f ~/.config/tmux/tmux.conf' # Always open tmux using the custom tmux conf location

#if command -v zellij >/dev/null && [ -z "$ZELLIJ" ] && [ -n "$PS1" ]; then
#  zellij attach -c launchpad 2>/dev/null || zellij
#fi

[[ -e ~/.profile ]] && emulate sh -c 'source ~/.profile'

[ -f ~/.zsh_utils ] && . ~/.zsh_utils
[ -f ~/.zsh_aliases ] && . ~/.zsh_aliases


# Opens a fzf menu to attach to an existing Zellij session
# If none exists, will just create a new one
zj() {
  if ! type fzf &> /dev/null; then
    brew install fzf
  fi
  local session=$(zellij list-sessions --no-formatting | awk '{print $1}' | fzf --exit-0)
  
  if [[ -n "$session" ]]; then
    zellij attach "$session"
  else
    zellij
  fi
}

# Opens a chooser that lets you inspect 
dci() {
  local id
  id=$(docker ps --filter "label=com.docker.compose.service" --format '{{.ID}}\t{{.Names}}\t{{.Label "com.docker.compose.service"}}' | \
    fzf --no-multi --with-nth=3 --prompt='Service> ' --height=40% --reverse | cut -f1) || return

  docker inspect "$id" | jq '.[0]'
}

# Fix Tmux issues with highlighting code comments
# if [[ $TERM == xterm ]]; then TERM=xterm-256color; fi

# PS1='%n@%m %F{red}%/%f $ ' # david@macbook /tmp $

git_info_path() {
  local toplevel repo branch relpath color

  if toplevel=$(git rev-parse --show-toplevel 2>/dev/null); then
    repo=${toplevel:t}
    # Branch/state detection
    if git rev-parse --abbrev-ref HEAD 2>/dev/null | grep -qv '^HEAD$'; then
      branch=$(git symbolic-ref --short HEAD 2>/dev/null)
      if [[ $branch == "main" || $branch == "master" ]]; then
        color="yellow"
      else
        color="green"
      fi
      if [[ -d "$toplevel/.git/rebase-merge" || -d "$toplevel/.git/rebase-apply" ]]; then
        branch="REBASE"
        color="red"
      fi
    else
      branch="DETACHED"
      color="red"
    fi
    relpath="${PWD#$toplevel}"
    relpath="${relpath#/}"
    # Compose the simplified repo:branch group with grey colon
    local group="%F{245}${repo}%f%F{245}:%f%F{$color}${branch}%f"
    if [[ -n $relpath ]]; then
      echo "${group}%F{245}/${relpath}%f"
    else
      echo "${group}"
    fi
  else
    echo "%F{245}${PWD/#$HOME/~}%f"
  fi
}


container_indicator() {
  if [[ -e /run/.containerenv ]]; then
    # Check for Distrobox (it sets $DISTROBOX_ENTER_PATH or $container variable)
    if [[ -n $DISTROBOX_ENTER_PATH || -n $container ]]; then
      echo " %F{magenta}ï†²%f"  # Nerd Font box icon for Distrobox
    else
      echo " %F{33}ïŒˆ%f"        # Nerd Font Docker icon in blue
    fi
  fi
}

short_user() {
  case "$USER" in
    root) echo "ro" ;;
    admin) echo "ad" ;;
    docker) echo "do" ;;
    luke) echo "lk" ;;
    *) echo "${USER:0:2}" ;;
  esac
}

short_host() {
  case "$HOST" in
    polar) echo "pl" ;;
    workbook) echo "wb" ;;
    macbook) echo "mb" ;;
    *) echo "${HOST:0:2}" ;;
  esac
}

setopt PROMPT_SUBST
PS1='%F{245}$(short_user)@$(short_host)%f$(container_indicator) $(git_info_path) %F{245}$%f '

setopt INC_APPEND_HISTORY SHARE_HISTORY
setopt APPEND_HISTORY
unsetopt BG_NICE		# do NOT nice bg commands
setopt CORRECT			# command CORRECTION
setopt EXTENDED_HISTORY		# puts timestamps in the history
setopt MENUCOMPLETE
setopt ALL_EXPORT

# ZSH Options
# https://zsh.sourceforge.io/Intro/intro_16.html
setopt   notify globdots correct pushdtohome cdablevars autolist
setopt   correctall autocd recexact longlistjobs
setopt   autoresume histignoredups pushdsilent
setopt   autopushd pushdminus extendedglob rcquotes mailwarning
unsetopt bgnice autoparamslash

# Autoload zsh modules when they are referenced
zmodload -a zsh/stat stat
zmodload -a zsh/zpty zpty
zmodload -a zsh/zprof zprof
# zmodload -ap zsh/mapfile map

# Autocomplete
autoload -U compinit
compinit
unsetopt ALL_EXPORT

# Autocompletion options
#
# Autocompletion - NVM
# export NVM_DIR="$HOME/.nvm"
#   [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
#   [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
#
# Autocompletion - UV
# echo 'eval "$(uv generate-shell-completion zsh)"' >> ~/.zshrc

# Atuin
eval "$(atuin init zsh)"
