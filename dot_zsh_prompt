# Custom Zsh Prompt
#
# DESCRIPTION:
#   A minimal, context-aware Zsh prompt that displays only relevant information.
#
# FEATURES:
#   - Shows the full path when outside Git, and path relative to repo root when inside.
#   - Displays Git branch name or status (main/master, rebase, detached), with colors.
#   - Shows prompt symbol based on context:
#       â€¢ '$' for regular users
#       â€¢ '#' for root
#       â€¢ â¬¢ (magenta) for Distrobox containers
#       â€¢ â¬¢ (blue) for Docker/Podman containers
#   - Changes the prompt symbol to red on non-zero exit codes.
#   - Shows `user@host` when connected via SSH, or username if not `luke`.
#   - Caches Git info per directory for performance.
#   - Omits spacing between prompt elements when not needed.
#   - Feature flags control git status, path compression, and short names.

# ========== Feature flags ==========
PROMPT_ENABLE_GIT_STATUS=true
PROMPT_ENABLE_PATH_COMPRESSION=false
PROMPT_ENABLE_SHORTEN_USER=true
PROMPT_ENABLE_SHORTEN_HOST=true

# ========== SSH and User Display ==========
show_user_host() {
  if [[ -n $SSH_CLIENT || -n $SSH_CONNECTION || -n $SSH_TTY ]]; then
    if [[ $PROMPT_ENABLE_SHORTEN_USER == true && $PROMPT_ENABLE_SHORTEN_HOST == true ]]; then
      echo "%F{cyan}$(short_user)@$(short_host)%f "
    elif [[ $PROMPT_ENABLE_SHORTEN_USER == true ]]; then
      echo "%F{cyan}$(short_user)@${HOST}%f "
    elif [[ $PROMPT_ENABLE_SHORTEN_HOST == true ]]; then
      echo "%F{cyan}${USER}@$(short_host)%f "
    else
      echo "%F{cyan}${USER}@${HOST}%f "
    fi
  else
    if [[ "$USER" != "luke" ]]; then
      if [[ $PROMPT_ENABLE_SHORTEN_USER == true ]]; then
        echo "%F{cyan}$(short_user)%f "
      else
        echo "%F{cyan}${USER}%f "
      fi
    fi
  fi
}

# ========== Git Prompt Cache ==========
typeset -g __GIT_INFO_CACHE_DIR=""
typeset -g __GIT_INFO_CACHE_STR=""

autoload -Uz add-zsh-hook
clear_git_cache() {
  __GIT_INFO_CACHE_DIR=""
  __GIT_INFO_CACHE_STR=""
}
add-zsh-hook chpwd clear_git_cache

# ========== Git Path Info ==========
compress_relative_path() {
  local max=3
  local path=${1:-}
  local parts=(${(s:/:)path})
  local len=${#parts[@]}
  if (( len > max )); then
    # show first, ellipsis, then last 3 parts
    local first=${parts[1]}
    local last_parts=(${parts[-3,-1]})
    echo "${first}/â€¦/${(j:/)last_parts}"
  else
    echo "$path"
  fi
}

git_info_path() {
  local toplevel repo branch relpath color
    if [[ "$PWD" == "$HOME" ]]; then
      echo "%F{245}~%f"
      return
    fi

  if ! command -v git >/dev/null 2>&1; then
    echo "%F{245}$(compress_path "$PWD")%f"
    return
  fi

  if [[ "$PWD" == "$__GIT_INFO_CACHE_DIR" && -n "$__GIT_INFO_CACHE_STR" ]]; then
    echo "$__GIT_INFO_CACHE_STR"
    return
  fi

  if toplevel=$(git rev-parse --show-toplevel 2>/dev/null); then
    repo=${toplevel:t}
    if git rev-parse --abbrev-ref HEAD 2>/dev/null | grep -qv '^HEAD$'; then
      branch=$(git symbolic-ref --short HEAD 2>/dev/null)
      if [[ $branch == "main" || $branch == "master" ]]; then
        color="yellow"
      else
        color="green"
      fi
      if [[ -d "$toplevel/.git/rebase-merge" || -d "$toplevel/.git/rebase-apply" ]]; then
        branch="REBASE"
        color="red"
      fi
    else
      branch="DETACHED"
      color="red"
    fi

    relpath="${PWD#$toplevel}"
    relpath="${relpath#/}"

    # Compress relative path if enabled, *without* ~ replacement!
    if [[ $PROMPT_ENABLE_PATH_COMPRESSION == true && -n $relpath ]]; then
      relpath=$(compress_relative_path "$relpath")
    fi

    local dirty_flags=""
    if [[ $PROMPT_ENABLE_GIT_STATUS == true ]]; then
      dirty_flags=$(git_dirty_status)
    fi

    local group="%F{245}${repo}%f%F{245}:%f%F{$color}${branch}%f${dirty_flags}"

    # Only append slash+relpath if relpath is not empty
    if [[ -n $relpath ]]; then
      __GIT_INFO_CACHE_STR="${group}%F{245}/${relpath}%f"
    else
      __GIT_INFO_CACHE_STR="${group}"
    fi

  else
    # Outside git repo, compress absolute path normally
    if [[ "$PWD" == "$HOME" ]]; then
      __GIT_INFO_CACHE_STR="%F{245}~%f"
    else
      __GIT_INFO_CACHE_STR="%F{245}$(compress_path "$PWD")%f"
    fi
  fi

  __GIT_INFO_CACHE_DIR="$PWD"
  echo "$__GIT_INFO_CACHE_STR"
}
# ========== Git porcelain status ==========
git_dirty_status() {
  # Only run if inside a git repo
  if ! git rev-parse --is-inside-work-tree &>/dev/null; then
    return
  fi

  local git_status staged untracked dirty flags=""
  git_status=$(git status --porcelain 2>/dev/null)

  if echo "$git_status" | grep -qE '^[AMDRC]'; then
    staged="+"
  fi

  if echo "$git_status" | grep -q '^??'; then
    untracked="?"
  fi

  if echo "$git_status" | grep -qE '^.[MD]'; then
    dirty="*"
  fi

  flags="${staged}${dirty}${untracked}"

  if [[ -n $flags ]]; then
    echo "%F{yellow}${flags}%f"
  fi
}


compress_path() {
  local path=${1:-$PWD}
  local home_prefix="$HOME/"
  local is_home_prefix=false

  # Check if path starts with $HOME/
  if [[ $path == $home_prefix* ]]; then
    is_home_prefix=true
    path=${path#$HOME/}  # strip $HOME/ from path for compression
  fi

  local parts=(${(s:/:)path})
  local len=${#parts[@]}
  local max=8

  if (( len > max )); then
    local first_part="${(j:/:)parts[1,3]}"
    local last_part="${(j:/:)parts[-3,-1]}"
    if $is_home_prefix; then
      echo "~/${first_part}/â€¦/${last_part}"
    else
      echo "/${first_part}/â€¦/${last_part}"
    fi
  else
    # Just show normal path, with ~ if home
    if $is_home_prefix; then
      echo "~/${path}"
    else
      echo "$path"
    fi
  fi
}





# ========== Optional Short Names ==========
short_user() {
  case "$USER" in
    root) echo "ro" ;;
    admin) echo "ad" ;;
    docker) echo "do" ;;
    luke) echo "lk" ;;
    *) echo "${USER:0:2}" ;;
  esac
}

short_host() {
  case "$HOST" in
    bluefin) echo "bf" ;;
    polar) echo "polar" ;;
    workbook) echo "work" ;;
    macbook) echo "mac" ;;
    *) echo "${HOST:0:2}" ;;
  esac
}

show_ssh_host() {
  if [[ -n $SSH_CLIENT || -n $SSH_CONNECTION || -n $SSH_TTY ]]; then
    short_host
  fi
}

# ========== Exit Code Indicator ==========
typeset -g LAST_EXIT_CODE=0

autoload -Uz add-zsh-hook
add-zsh-hook precmd update_last_exit_code

update_last_exit_code() {
  LAST_EXIT_CODE=$?
}

# ========== Prompt Symbol ==========
prompt_symbol() {
  local symbol color

  if [[ -n $DISTROBOX_ENTER_PATH || -n $container ]]; then
    symbol='â¬¢'
    color='magenta'
  elif [[ -e /run/.containerenv ]]; then
    symbol='â¬¢'
    color='blue'
  elif [ "$EUID" -eq 0 ]; then
    symbol='#'
    color='red'
  else
    symbol='$'
    color='white'
  fi

  # ðŸ”´ Error indicator: override with red if previous command failed
  if (( LAST_EXIT_CODE != 0 )); then
    color='red'
  fi

  echo "%F{$color}${symbol}%f"
}

# ========== Add conditional spacing =========
spaced() {
  local part="$($1)"
  [[ -n $part ]] && echo " $part"
}

# ========== Enable Prompt Substitution ==========
setopt PROMPT_SUBST

# ========== Final Prompt ==========
PS1='$(spaced show_user_host)$(git_info_path)$(spaced prompt_symbol) '

