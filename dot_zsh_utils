# # Simpler version of a man-page
wtfis() { curl "https://cheat.sh/$1"; } # Example: wtfis curl

# Copy to clipboard
alias copy='xclip -selection clipboard' # Example: echo "Hello" | copy

# Move 'up' so many directories instead of using several cd ../../, etc.
up() { cd $(eval printf '../'%.0s {1..$1}) && pwd; }

#Tail all logs in /var/log
alias logs="find /var/log -type f -exec file {} \; | grep 'text' | cut -d' ' -f1 | sed -e's/:$//g' | grep -v '[0-9]$' | xargs tail -f"


# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'


# Wikipedia article in less view
 wiki() {
    w3m -B 1 -dump "https://en.m.wikipedia.org/wiki/$1" |
    sed -n '/View source/,$p' |
    awk 'NR>1{print last} {last=$0} END{print last}' |
    less -R
}

cheatsrs() {
    w3m "https://cheats.rs"
}

## Guard against dangerous git actions
# TODO: Move this to its own dot_gitguard file
# TODO: 
git () {
    local proceed

    if [[ "$1" == "checkout" ]]; then
        echo "Don't use checkout; use switch or restore." >&2
        echo -n "Do you still want to proceed with 'git checkout'? (y/N) "
        read proceed
        if [[ ! $proceed =~ ^[Yy]$ ]]; then
            return 1
        fi
    elif [[ "$1" == "push" && "$2" == "--force" ]]; then
        echo "Use --force-with-lease instead." >&2
        echo -n "Do you still want to proceed with 'git push --force'? (y/N) "
        read proceed
        if [[ ! $proceed =~ ^[Yy]$ ]]; then
            return 1
        fi
    fi

    command git "$@"
}


##############################################################################
# mark/jump support + completion
# un/mark name : bookmark a directory or remove one (unmark)
# jump name : jump to directory
# marks : show all bookmarks
export MARKPATH=$HOME/.marks
function jump {
    cd -P $MARKPATH/$1 2>/dev/null || echo "No such mark: $1"
}
function mark {
    mkdir -p $MARKPATH; ln -s $(pwd) $MARKPATH/$1
}
function unmark {
    rm -i $MARKPATH/$1
}
function marks {
    ls -l $MARKPATH | sed 's/  / /g' | cut -d' ' -f9- | sed 's/ -/\t-/g' && echo
}

_completemarks() {
    local curw
    if [ "$SHELL" = "/bin/bash" ]; then
        curw=${COMP_WORDS[COMP_CWORD]}
    else
        curw=${words[CURRENT]}
    fi
    local wordlist=$(find $MARKPATH -type l -printf "%f\n")
    if [ "$SHELL" = "/bin/bash" ]; then
        COMPREPLY=($(compgen -W '${wordlist[@]}' -- "$curw"))
    else
        compadd -X "Marks:" ${(f)wordlist}
    fi
}

if [ -n "$BASH_VERSION" ]; then
    complete -F _completemarks jump unmark
elif [ -n "$ZSH_VERSION" ]; then
    compctl -K _completemarks jump unmark
fi

