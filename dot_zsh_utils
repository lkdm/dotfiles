
# Opens a fzf menu to attach to an existing Zellij session
# If none exists, will just create a new one
zj() {
  if ! type fzf &> /dev/null; then
    echo "fzf not found, installing..."
    brew install fzf
  fi

  local session
    session=$(
    {
        echo "New session" 
        zellij list-sessions --no-formatting | awk '{print $1}'
    } | fzf --exit-0 --no-sort --prompt="Select session > "
    )

  if [[ "$session" == "New session" ]]; then
    zellij
  elif [[ -n "$session" ]]; then
    zellij attach "$session"
  else
    :
  fi
}

absolutions() {
  echo "Homebrew"
  brew update && brew upgrade
  echo "Chezmoi"
  chezmoi git pull
}


# View largest disk usage
alias largest='du -h 2> /dev/null | sort -hr | head -n20'

# Copy to clipboard
alias copy='xclip -selection clipboard' # Example: echo "Hello" | copy

# Opens a chooser that lets you inspect 
dci() {
  local id
  id=$(docker ps --filter "label=com.docker.compose.service" --format '{{.ID}}\t{{.Names}}\t{{.Label "com.docker.compose.service"}}' | \
    fzf --no-multi --with-nth=3 --prompt='Service> ' --height=40% --reverse | cut -f1) || return

  docker inspect "$id" | jq '.[0]'
}

# jrnl
# Zsh function wrapper for automated journaling with Git integration:
#
# 1. Pulls the latest changes from the remote repository.
# 2. Stages and commits changes if any modifications are detected.
# 3. Pushes new commits to the remote repository.
#
# The function will skip committing and pushing if a rebase or merge conflict is detected,
# ensuring that no actions are taken until the repository is in a clean state.

jrnl() {
    if [[ "$1" == "fic" ]]; then
        export JRNL="$HOME/Repos/lkdm/fic"
    else
        export JRNL="$HOME/Repos/lkdm/jrnl"
    fi
    ~/.config/jrnl/scripts/pull.sh || return 1
    command jrnl "$@" || return 1
    ~/.config/jrnl/scripts/commit.sh || return 1
    ~/.config/jrnl/scripts/push.sh &
}

