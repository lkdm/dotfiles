
# Opens a fzf menu to attach to an existing Zellij session
# If none exists, will just create a new one
zj() {
  if ! type fzf &> /dev/null; then
    echo "fzf not found, installing..."
    brew install fzf
  fi

  local session
    session=$(
    {
        echo "New session" 
        zellij list-sessions --no-formatting | awk '{print $1}'
    } | fzf --exit-0 --no-sort --prompt="Select session > "
    )

  if [[ "$session" == "New session" ]]; then
    zellij
  elif [[ -n "$session" ]]; then
    zellij attach "$session"
  else
    :
  fi
}

# Helper for prefixing output (already defined in your shell config)
prefix() {
  local tag="$1"
  awk -v tag="$tag" '{printf "%8s | %s\n", tag, $0}'
}

upgrade() {
  {
    local OS_RELEASE=$(grep '^ID=' /etc/os-release | cut -d= -f2 | tr -d '"')
    echo "Starting system upgrade..." | prefix system
    if [ "$OS_RELEASE" = "bluefin" ]; then
      echo "Upgrading Bluefin..." | prefix system
      ujust upgrade 2>&1 | prefix system
    fi

    if [ "$OS_RELEASE" = "debian" ]; then
      echo "Upgrading Debian..." | prefix system
      sudo apt update && sudo apt upgrade -y 2>&1 | prefix system
    fi

    command -v cargo &>/dev/null && {
      {
        echo "Starting cargo upgrade..."
        command -v cargo-install-update &>/dev/null || {
          echo "Installing cargo-update..."
          cargo install cargo-update
        }
        command -v cargo-install-update &>/dev/null && cargo install-update -a
      } 2>&1 | prefix cargo &
    }

    command -v flatpak &>/dev/null && flatpak update -y 2>&1 | prefix flatpak &
    command -v brew &>/dev/null && brew update && brew upgrade 2>&1 | prefix brew &
    command -v mas &>/dev/null && mas upgrade 2>&1 | prefix mas &
    command -v chezmoi &>/dev/null && chezmoi git pull 2>&1 | prefix chezmoi &

    wait
    echo "✅ All updates completed." | prefix script

    if command -v distrobox-host-exec &>/dev/null; then
      echo "⚠️  Warning: You are inside a Distrobox/container." | prefix script
      echo "Please run this on the host *as well*." | prefix script
    fi
  }
}

nvim-purge() {
  echo "Purging Neovim config and plugin directories"
  rm ~/.config/nvim -rf && echo "Purged config"
  rm ~/.local/share/nvim/lazy -rf && echo "Purged lazy packages"
  rm ~/.local/share/nvim/mazon -rf && echo "Purged mason packages"
}

# View largest disk usage
alias largest='du -h 2> /dev/null | sort -hr | head -n20'

# Copy to clipboard
alias copy='xclip -selection clipboard' # Example: echo "Hello" | copy

# Opens a chooser that lets you inspect 
dci() {
  local id
  id=$(docker ps --filter "label=com.docker.compose.service" --format '{{.ID}}\t{{.Names}}\t{{.Label "com.docker.compose.service"}}' | \
    fzf --no-multi --with-nth=3 --prompt='Service> ' --height=40% --reverse | cut -f1) || return

  docker inspect "$id" | jq '.[0]'
}


clean_temp_files() {
  # Define the directories and safely expand globs using zsh glob qualifiers
  local -a dirs=(
    ~/"Downloads/"*(N)
    ~/"Pictures/Screenshots/"*(N)
    ~/"Desktop/"*(N)
  )

  for item in "${dirs[@]}"; do
    if [[ -e "$item" ]]; then
      gio trash "$item" || true
    fi
  done
}

# jrnl
# Zsh function wrapper for automated journaling with Git integration:
#
# 1. Pulls the latest changes from the remote repository.
# 2. Stages and commits changes if any modifications are detected.
# 3. Pushes new commits to the remote repository.
#
# The function will skip committing and pushing if a rebase or merge conflict is detected,
# ensuring that no actions are taken until the repository is in a clean state.

jrnl() {
    if [[ "$1" == "fic" ]]; then
        export JRNL="$HOME/Repos/lkdm/fic"
    else
        export JRNL="$HOME/Repos/lkdm/jrnl"
    fi
    ~/.config/jrnl/scripts/pull.sh || return 1
    command jrnl "$@" || return 1
    ~/.config/jrnl/scripts/commit.sh || return 1
    ~/.config/jrnl/scripts/push.sh &
}

yt-audio () {
    # Downloads the best audio quality stream from YouTube and extracts as mp3.
    #
    # For example:
    #
    # $ yt-audio 'https://www.youtube.com/watch?v=tVx3lt8ZKHw'
    #
    # This will make a tVx3lt8ZKHw.mp3 file after some processing.
    yt-dlp -f 'ba' -x --audio-format mp3 "$1"  -o '%(id)s.%(ext)s'
}

aliases () {
  # Finds and runs defined aliases and functions
  local cmd=$({
    grep '^alias ' ~/.zaliases 2>/dev/null | sed -E "s/^alias +([^=]+)=.*/\1/"
    grep '^[a-zA-Z0-9_]\+ *() *{' ~/.zfunctions 2>/dev/null | sed -E 's/^([a-zA-Z0-9_]+).*/\1/'
  } | sort | fzf)

  [[ -n "$cmd" ]] && print -z "$cmd"  # put in command buffer
}
